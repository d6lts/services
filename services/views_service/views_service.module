<?php
// $Id$

/**
 * Implementation of hook_help().
 */

function views_service_help($path, $arg) {
  switch ($path) {
    case 'admin/help#services_views':
      return t('<p>Provides view methods to services applications. Requires services.module.</p>');
    case 'admin/modules#description':
      return t('Provides view methods to services applications. Requires services.module.');
  }
}

/**
 * Implementation of hook_service().
 */
function views_service_service() {
  return array(
    // views.getView
    array(
      '#method'   => 'views.getView',
      '#callback' => 'views_service_get_view',
      '#args'     => array(
        array(
          '#name'         => 'view_name',
          '#type'         => 'string',
          '#description'  => t('View name.')),
        array(
          '#name'         => 'fields',
          '#type'         => 'array',
          '#optional'     => TRUE, 
          '#description'  => t('A list of fields to return.')),
        array(
          '#name'         => 'args',
          '#type'         => 'array',
          '#optional'     => TRUE,
          '#description'  => t('An array of arguments to pass to the view.'))),
      '#return'   => 'array',
      '#help'     => t('Retrieves a view defined in views.module.')),

    // views.exportView
    array(
      '#method'   => 'views.exportView',
      '#callback' => 'views_service_export_view',
      '#access arguments' => array('administer views'),
      '#args'     => array('string'),
      '#args'     => array(
        array(
          '#name'         => 'view_name',
          '#type'         => 'string',
          '#description'  => t('View name.'),
        ),
      ),
          
      '#return'   => 'string',
      '#help'     => t('Exports the code of a view, same as the output you would get from the Export tab.'),
    ),

    // views.importView
    array(
      '#method'   => 'views.importView',
      '#callback' => 'views_service_import_view',
      '#access arguments' => array('administer views'),
      '#args'     => array('string'),
      '#args'     => array(
        array(
          '#name'         => 'view_export',
          '#type'         => 'string',
          '#description'  => t('Code from a Views->Export.'),
        ),
      ),
      '#return'   => 'int',
      '#help'     => t('Imports a view through code, equivalent to using the Import tab in the views admin.'),
    ),
  );
}

/**
 * Get a view from the database.
 */
function views_service_get_view($view_name, $fields = array(), $args = array()) { 
  $view = views_get_view($view_name);
  if (is_null($view)) {
    return services_error('View does not exist.');
  }
  
  // Check access
  if (!views_access($view)) {
    return services_error('You do not have access to this view.');
  }
  
  $view->set_arguments($args);
  $view->execute();
  
  foreach ($view->result as $node) {
    $nodes[] = services_node_load(node_load($node->nid), $fields);
  }
  return $nodes;
}

/**
 * Export a view.
 */
function views_service_export_view($view_name) { 
  $view = views_get_view($view_name);
  if (is_null($view)) {
    return services_error('View does not exist.');
  }
  
  return $view->export();
}

/**
 * Import a view.
 */
function views_service_import_view($view_export) { 
  views_include('view');
  ob_start();
  eval($view_export);
  ob_end_clean();
    
  if (!is_object($view)) {
    return services_error(t('Unable to interpret view code.'));
  }

  if (empty($view->api_version) || $view->api_version < 2) {
    // Check for some value that would only exist on a Views 1 view.
    if (isset($view->url) || isset($view->page) || isset($view->block)) {
      views_include('convert');
      $view = views1_import($view);
      return services_error(t('You are importing a view created in Views version 1. You may need to adjust some parameters to work correctly in version 2.'));
    }
    else {
      return services_error(t('That view is not compatible with this version of Views.'));
    }
  }

  $existing_view = views_get_view($view->name);
  if ($existing_view && $existing_view->type != t('Default')) {
    $view->vid = $existing_view->vid;
  }
  
  $view->save();
  return $view->vid;
}
