<?php
// $Id$
/**
 * @author Services Dev Team
 * @file
 *  Link general views functionalities to services module.
 */

/**
 * Implementation of hook_help().
 */
function views_service_help($path, $arg) {
  switch ($path) {
    case 'admin/help#services_views':
      return t('<p>Provides view methods to services applications. Requires services.module.</p>');
    case 'admin/modules#description':
      return t('Provides view methods to services applications. Requires services.module.');
  }
}

/**
 * Implementation of hook_service().
 */
function views_service_service() {
  return array(
    // views.getActualView
    array(
      '#method'   => 'views.getActualView',
      '#callback' => 'views_service_get_actualview',
      '#file'             => array('file' => 'inc', 'module' => 'views_service'),
      '#key'              => FALSE,
      '#args'     => array(
        array(
          '#name'           => 'view_name',
          '#type'           => 'string',
          '#description'    => t('View name.')
        ),
        array(
          '#name'           => 'display_id',
          '#type'           => 'string',
          '#optional'       => TRUE,
          '#description'    => t('View Display ID.')
        ),
        array(
          '#name'           => 'args',
          '#type'           => 'array',
          '#optional'       => TRUE,
          '#description'    => t('An array of arguments to pass to the view.')
        ),
        array(
          '#name'           => 'offset',
          '#type'           => 'int',
          '#optional'       => TRUE,
          '#description'    => t('An offset integer for paging.')
        ),
        array(
          '#name'           => 'limit',
          '#type'           => 'int',
          '#optional'       => TRUE,
          '#description'    => t('A limit integer for paging.')
        ),
      ),
      '#return' => 'array',
      '#help'   => t('Retrieves a view defined in views.module. This is different from views.getView in that it returns the actual fields from the view instead of a simple node.')
    ),

    // views.getView
    array(
      '#method'           => 'views.getView',
      '#callback'         => 'views_service_get_view',
      '#file'             => array('file' => 'inc', 'module' => 'views_service'),
      '#key'              => FALSE,
      '#args'             => array(
        array(
          '#name'           => 'view_name',
          '#type'           => 'string',
          '#description'    => t('View name.')
        ),
        array(
          '#name'           => 'fields',
          '#type'           => 'array',
          '#optional'       => TRUE,
          '#description'    => t('A list of fields to return.')
        ),
        array(
          '#name'           => 'args',
          '#type'           => 'array',
          '#optional'       => TRUE,
          '#description'    => t('An array of arguments to pass to the view.')
        ),
        array(
          '#name'           => 'offset',
          '#type'           => 'int',
          '#optional'       => TRUE,
          '#description'    => t('An offset integer for paging.')
        ),
        array(
          '#name'           => 'limit',
          '#type'           => 'int',
          '#optional'       => TRUE,
          '#description'    => t('A limit integer for paging.')
        ),
      ),
      '#return'           => 'array',
      '#help'             => t('Retrieves a view defined in views.module.')),

    // views.exportView
    array(
      '#method'           => 'views.exportView',
      '#callback'         => 'views_service_export_view',
      '#access arguments' => array('administer views'),
      '#file'             => array('file' => 'inc', 'module' => 'views_service'),
      '#args'             => array('string'),
      '#args'             => array(
        array(
          '#name'           => 'view_name',
          '#type'           => 'string',
          '#description'    => t('View name.'),
        ),
      ),

      '#return'           => 'string',
      '#help'             => t('Exports the code of a view, same as the output you would get from the Export tab.'),
    ),

    // views.importView
    array(
      '#method'           => 'views.importView',
      '#callback'         => 'views_service_import_view',
      '#access arguments' => array('administer views'),
      '#file'             => array('file' => 'inc', 'module' => 'views_service'),
      '#args'             => array(
        array(
          '#name'           => 'view_export',
          '#type'           => 'string',
          '#description'    => t('Code from a Views->Export.'),
        ),
      ),
      '#return'           => 'int',
      '#help'             => t('Imports a view through code, equivalent to using the Import tab in the views admin.'),
    ),
  );
}
