<?php
// $Id$
/**
 * @author Services Dev Team
 * @file
 *  Link general node functionalities to services module.
 */

/**
 * Implementation of hook_help().
 */
function node_service_help($path, $arg) {
  switch ($path) {
    case 'admin/help#services_node':
      return t('<p>Provides node methods to services applications. Requires services.module.</p>');
    case 'admin/modules#description':
      return t('Provides node methods to services applications. Requires services.module.');
  }
}

function node_service_perm() {
  return array('load raw node data');
}

/**
 * Implementation of hook_service().
 */
function node_service_service() {
  return array(

    // node.load
    array(
      '#method'   => 'node.load',
      '#callback' => 'node_service_load',
      '#access callback' => 'node_service_load_access',
      '#args'     => array(
        array(
          '#name'         => 'nid',
          '#type'         => 'int',
          '#description'  => t('A node id.')),
        array(
          '#name'         => 'fields',
          '#type'         => 'array',
          '#optional'     => TRUE,
          '#description'  => t('A list of fields to return.'))),
      '#return'   => 'struct',
      '#help'     => t('Returns a node.')),

    // node.save
    array(
      '#method'   => 'node.save',
      '#callback' => 'node_service_save',
      '#access callback' => 'node_service_save_access',
      '#args'     => array(
        array(
          '#name'         => 'node',
          '#type'         => 'struct',
          '#description'  => t('A node object. Upon creation, node object must include "type". Upon update, node object must include "nid" and "changed".'))),
      '#return'   => 'struct',
      '#help'     => t('Save a node object into the database.')),

    // node.delete
    array(
      '#method'   => 'node.delete',
      '#callback' => 'node_delete',
      '#access callback' => 'node_service_delete_access',
      '#args'     => array(
        array(
          '#name'         => 'nid',
          '#type'         => 'int',
          '#description'  => t('A node id.'))),
      '#help'     => t('Delete a node.')),
  );
}

/**
 * Returns a specified node.
 */
function node_service_load($nid, $fields = array()) {
  $node = services_node_load(node_load(array('nid' => $nid)), $fields);

  if (!$node) {
    return services_error(t("Could not find the node."));
  }

  return $node;
}

function node_service_load_access($nid) {
  $node = node_load($nid);
  return node_access('view', $node) && user_access('load raw node data');
}

function node_service_save($edit) {
  // Load the required includes for drupal_execute
  module_load_include('inc', 'node', 'node.pages');
  $nid = null;

  if ($edit['nid']) {
    $node = node_load($edit['nid']);
    if ($node->nid) {
      // Setup form_state.
      $form_state = array();
      $form_state['values'] = (array) $edit;
      $form_state['values']['op'] = t('Save');

      // Later on in the chain node_form seems to expect a copy of
      // the old node object.
      $form_state['node'] = (array) $node;

      $ret = drupal_execute($node->type .'_node_form', $form_state, (object)$node);

      // If the node is immediately reloaded after update, it will
      // load the OLD cached version.
      node_load(0, NULL, TRUE);

      // Set $nid, so it can be returned
      $nid = $node->nid;
    }
    else {
      return services_error(t('Node not found'));
    }
  }
  else {
    // Setup form_state
    $form_state = array();
    $form_state['values'] = (array) $edit;
    $form_state['values']['op'] = t('Save');

    $ret = drupal_execute($edit['type'] .'_node_form', $form_state, (object)$edit);

    // Fetch $nid out of $form_state
    $nid = $form_state['nid'];
  }
  if ($errors = form_get_errors()) {
    return services_error(implode("\n", $errors));
  }

  // assume this is a remnant from using node_save instead of drupal_execute
  // was messing up log due to missing NULL for variables argument:
  // http://api.drupal.org/api/function/watchdog/6, fixed and commented out
  // as drupal_execute already logs the update.
  watchdog('content', '@type: updated %title.',
    array('@type' => t($node->type), '%title' => $node->title),
    WATCHDOG_NOTICE, l(t('view'), 'node/'. $node->nid));
  return $nid;
}

function node_service_save_access($node) {
  if (isset($node['nid'])) {
    return node_access('update', $node);
  }
  return node_access('create', $node['type']);
}

function node_service_delete_access($nid) {
  $node = node_load($nid);
  return node_access('delete', $node);
}
