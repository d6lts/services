<?php
// $Id$
/**
 * @author Services Dev Team
 * @file
 *  Link general node functionalities to services module.
 */

/**
 * Implementation of hook_help().
 */
function node_service_help($path, $arg) {
  switch ($path) {
    case 'admin/help#services_node':
      return t('<p>Provides node methods to services applications. Requires services.module.</p>');
    case 'admin/modules#description':
      return t('Provides node methods to services applications. Requires services.module.');
  }
}

/**
 * Implementation of hook_form_alter().
 */
function node_service_form_services_admin_settings_alter(&$form, $form_state) {
  $form['security']['node_access']['#title'] = t('Check node access settings when loading node data');
  $form['security']['node_access']['#type'] = 'checkbox';
  $form['security']['node_access']['#description'] = t('When enabled, the node.load method will perform an additional node access view check before providing the node data.');
  if (variable_get('node_service_node_access', TRUE)) {
    $form['security']['node_access']['#default_value'] = 1;
  }
  $form['#submit'][] = 'node_service_save_access_setting';
}

/**
 * Implementation of hook_perm().
 */
function node_service_perm() {
  return array('load raw node data');
}

/**
 * Implementation of hook_service().
 */
function node_service_service() {
  return array(

    // node.load
    array(
      '#method'           => 'node.load',
      '#callback'         => 'node_service_load',
      '#access callback'  => 'node_service_load_access',
      '#file'             => array('file' => 'inc', 'module' => 'node_service'),
      '#key'              => FALSE,
      '#args'             => array(
        array(
          '#name'           => 'nid',
          '#type'           => 'int',
          '#description'    => t('A node id.')),
        array(
          '#name'           => 'fields',
          '#type'           => 'array',
          '#optional'       => TRUE,
          '#description'    => t('A list of fields to return.'))),
      '#return'           => 'struct',
      '#help'             => t('Returns a node.')),

    // node.save
    array(
      '#method'           => 'node.save',
      '#callback'         => 'node_service_save',
      '#access callback'  => 'node_service_save_access',
      '#file'             => array('file' => 'inc', 'module' => 'node_service'),
      '#args'             => array(
        array(
          '#name'           => 'node',
          '#type'           => 'struct',
          '#description'    => t('A node object. Upon creation, node object must include "type". Upon update, node object must include "nid" and "changed".'))),
      '#return'           => 'struct',
      '#help'             => t('Save a node object into the database.')),

    // node.delete
    array(
      '#method'           => 'node.delete',
      '#callback'         => 'node_delete',
      '#access callback'  => 'node_service_delete_access',
      '#file'             => array('file' => 'inc', 'module' => 'node_service'),
      '#args'             => array(
        array(
          '#name'           => 'nid',
          '#type'           => 'int',
          '#description'    => t('A node id.'))),
      '#help'             => t('Delete a node.')),
  );
}
