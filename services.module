<?php
// $Id$

/**
 * @file
 * services.module
 */

/**
 * Implementation of hook_help().
 */
function services_help($path, $arg) {
  switch ($path) {
    case 'admin/help#services':
      return '<p>'. t('Visit the <a href="@handbook_url">Services Handbook</a> for help and information.', array('@handbook_url' => 'http://drupal.org/node/109782')) .'</p>';
    
    case 'admin/build/services':
    case 'admin/build/services/browse':
      $output = '<p>'. t('Services are collections of methods available to remote applications. They are defined in modules, and may be accessed in a number of ways through server modules. Visit the <a href="@handbook_url">Services Handbook</a> for help and information.', array('@handbook_url' => 'http://drupal.org/node/109782')) .'</p>';
      $output .= '<p>'. t('All enabled services and methods are shown. Click on any method to view information or test.') .'</p>';      return $output;
      
    case 'admin/build/services/keys':
      return t('An API key is required to allow an application to access Drupal remotely.');
      
  }
}

/**
 * Implementation of hook_perm().
 */
function services_perm() { 
  return array('access services', 'administer services'); 
}

/**
 * Implementation of hook_menu().
 */
function services_menu() {
  $items = array();
  
  // admin
  $items['admin/build/services'] = array(
    'title' => 'Services',
    'description' => 'Allows external applications to communicate with Drupal.',
    'access arguments' => array('administer services'),
    'page callback' => 'services_admin_browse_index',
    'file' => 'services_admin_browse.inc',
  );
  
  // browse
  $items['admin/build/services/browse'] = array( 
    'title' => 'Browse',
    'description' => 'Browse and test available remote services.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  
  // API Keys
  $items['admin/build/services/keys'] = array(
    'title' => 'Keys',
    'description' => 'Manage application access to site services.',
    'page callback' => 'services_admin_keys_list',
    'access callback' => 'variable_get',
    'access arguments' => array('services_use_key', TRUE),
    'type' => MENU_LOCAL_TASK,
    'file' => 'services_admin_keys.inc',
  );
  $items['admin/build/services/keys/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/build/services/keys/add'] = array(
    'title' => 'Create key',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('services_admin_keys_form'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'services_admin_keys.inc',
  );
  
  // Settings
  $items['admin/build/services/settings'] = array(
    'title' => 'Settings',
    'description' => 'Configure service settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('services_admin_settings'),
    'access arguments' => array('administer services'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'services_admin_browse.inc',    
  );
  $items['admin/build/services/settings/general'] = array(
    'title' => 'General',
    'description' => 'Configure service settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('services_admin_settings'),
    'access arguments' => array('administer services'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  ); 
  
  // method
  $items['admin/build/services/browse/%'] = array(
    'title' => 'Services',
  	'description' => 'Calls a Services method.',
    'page callback' => 'services_admin_browse_method',
    'page arguments' => array(1),
  	'access arguments' => array('administer services'),
    'type' => MENU_CALLBACK,
    'file' => 'services_admin_browse.inc',
  );
  
  // crossdomain.xml
  $items['crossdomain.xml'] = array(
    'access arguments' => array('access services'),
    'page callback' => 'services_crossdomain_xml',
    'type' => MENU_CALLBACK,
  );
  
  // server
  $items['services/%'] = array(
    'title' => 'Services',
    'access arguments' => array('access services'),
    'page callback' => 'services_server',
  	'page arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

function services_theme() {
  return array(
    'services_admin_browse_test' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}


/**
 * Callback for server endpoint
 */
function services_server($server_path = null) {
  // Find which module the server is part of
  foreach (module_implements('server_info') as $module) {
    $info = module_invoke($module, 'server_info');
    if ($info['#path'] == $server_path) {
      
      // call the server
      services_set_server_info($module);
      print module_invoke($module, 'server');
      
      // Do not let this output
      exit;
    }
  }
  // return 404 if the service doesn't exist
  drupal_not_found();
}

/*
 * Callback for crossdomain.xml
 */
function services_crossdomain_xml() {
  global $base_url;
  $output = '<!DOCTYPE cross-domain-policy SYSTEM "http://www.macromedia.com/xml/dtds/cross-domain-policy.dtd">'."\n";
  $output .= '<cross-domain-policy>'."\n";
  $output .= '  <allow-access-from domain="'. $_SERVER['HTTP_HOST'] .'" />'."\n";
  $output .= '  <allow-access-from domain="*.'. $_SERVER['HTTP_HOST'] .'" />'."\n";  
  $keys = services_get_keys();
  
  foreach ($keys as $key) {
    if (!empty($key->domain)) {
      $output .= '  <allow-access-from domain="'. $key->domain .'" />'."\n";
      $output .= '  <allow-access-from domain="*.'. $key->domain .'" />'."\n";
    }
  }
  
  $output .= '</cross-domain-policy>';
  
  services_xml_output($output);
}

function services_xml_output($xml) {
  $xml = '<?xml version="1.0"?>'."\n". $xml;
  header('Connection: close');
  header('Content-Length: '. strlen($xml));
  header('Content-Type: text/xml');
  header('Date: '. date('r'));
  echo $xml;
  exit;
}

function services_set_server_info($module) {
  $server_info = new stdClass();
  $server_info->module = $module;
  $server_info->drupal_path = getcwd();
  return services_get_server_info($server_info);
}

function services_get_server_info($server_info = null) {
  static $info;
  if (!$info && $server_info) {
    $info = $server_info;
  }
  return $info;
}

/**
 * Prepare an error message for returning to the XMLRPC caller.
 */
function services_error($message) {
  $server_info = services_get_server_info();
    
  // Look for custom error handling function.
  // Should be defined in each server module.
  if (module_hook($server_info->module, 'server_error')) {
    return module_invoke($server_info->module, 'server_error', $message);
  }
  
  // No custom error handling function found.
  return $message;
}

/**
 * This is the magic function through which all remote method calls must pass.
 */
function services_method_call($method_name, $args = array()) {
  $method = services_method_get($method_name);
  
  // Check that method exists.
  if (empty($method)) {
    return services_error(t('Method does not exist.'));
  }
  
  // Check for missing args.
  foreach ($method['#args'] as $key => $arg) {
    if (!$arg['#optional']) {
      if (empty($args[$key])) {
        return services_error(t('Missing required arguments.'));
      }
    }
  }
  
  // Add additonal processing for methods requiring api key
  if (variable_get('services_use_key', TRUE)) {
    $api_key = array_shift($args);
    if (!services_validate_key($api_key)) {
      return services_error(t('Invalid API key.'));
    }
  }
  
  // Add additonal processing for methods requiring authentication
  if ($method['#auth'] && variable_get('services_use_sessid', TRUE)) {
    $sessid = array_shift($args);
    if (empty($sessid)) {
      return services_error(t('Invalid sessid.'));
    }
    services_session_restart($sessid);
  }
  
  // Change working directory to drupal root to call drupal function,
  // then change it back to server module root to handle return.
  $server_root = getcwd();
  $server_info = services_get_server_info();
  if ($server_info) {
    chdir($server_info->drupal_path);
  }
  $result = call_user_func_array($method['#callback'], $args);
  if ($server_info) {
    chdir($server_root);
  }
  
  //return print_r($result, true);
  
  return $result;
}

/**
   * This should probably be cached in drupal cache.
 */
function services_get_all() {
  static $methods_cache;
  if (!isset($methods_cache)) {
    $methods = module_invoke_all('service');
    
    // api_key arg
    $arg_api_key = array(
      '#name' => 'api_key',
      '#type' => 'string',
      '#description' => t('A valid API key.'),
    );
    
    // sessid arg
    $arg_sessid = array(
      '#name' => 'sessid',
      '#type' => 'string',
      '#description' => t('A valid sessid.'),
    );
    
    foreach ($methods as $key => $method) {
      
      // set method defaults
      if (!isset($methods[$key]['#auth'])) {
        $methods[$key]['#auth'] = true;
      }
      if (!isset($methods[$key]['#args'])) {
        $methods[$key]['#args'] = array();
      }
      
      if ($methods[$key]['#auth'] && variable_get('services_use_sessid', TRUE)) {
        $methods[$key]['#args'] = array_merge(array($arg_sessid), $methods[$key]['#args']);
      }
      
      if (variable_get('services_use_key', TRUE)) {
        $methods[$key]['#args'] = array_merge(array($arg_api_key), $methods[$key]['#args']);
      }
      
      // set defaults for args
      foreach ($methods[$key]['#args'] as $arg_key => $arg) {
        if (is_array($arg)) {
          if (!isset($arg['#optional'])) {
            $methods[$key]['#args'][$arg_key]['#optional'] = false;
          }
        }
        else {
          $arr_arg = array();
          $arr_arg['#name'] = t('unnamed');
          $arr_arg['#type'] = $arg;
          $arr_arg['#description'] = t('No description given.');
          $arr_arg['#optional'] = false;
          $methods[$key]['#args'][$arg_key] = $arr_arg;
        }
      }
      reset($methods[$key]['#args']);
    }
    $methods_cache = $methods;
  }
  return $methods_cache;
}

function services_method_get($method_name) {
  static $method_cache;
  if (!isset($method_cache[$method_name])) {
    foreach (services_get_all() as $method) {
      if ($method_name == $method['#method']) {
        $method_cache[$method_name] = $method;
        break;
      }
    }
  }
  return $method_cache[$method_name];
}

function services_validate_key($kid) {
  $key = services_get_key($kid);
  if ($key) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

function services_get_key($kid) {
  $keys = services_get_keys();
  foreach ($keys as $key) {
    if ($key->kid == $kid) {
      return $key;
    }
  }
}

function services_get_keys() {
  static $keys;
  if (!$keys) {
    $keys = array();
    $result = db_query("SELECT * FROM {services_keys}");
    while ($key = db_fetch_object($result)) {
      $keys[$key->kid] = $key;
    }
  }
  return $keys;
}

/**
 * Make any changes we might want to make to node.
 */
function services_node_load($node, $fields = array()) {
  if (!$node->nid) {
    return null;
  }
  
  // Apply filters to fields
  $body = $node->body;
  $node->body = new StdClass();
  $node->body_value = $body;
  $node->body = check_markup($body, $node->format, FALSE);

  // Loop through and get only requested fields
  if (count($fields) > 0) {
    foreach ($fields as $field) {
      $val->{$field} = $node->{$field};
    }
  } 
  else {
    $val = $node;
  }

  return $val;
}

/**
 * Destroy session and setup services session.
 */
function services_session_restart($sessid) {
  if ($sessid == session_id()) {
    return;
  }
  session_id($sessid);
  sess_read($sessid);
  session_start();
}
