<?php
// $Id$
/**
 * @author Services Dev Team
 * @file
 *  Provides a generic by powerful API for web services.
 */

/**
 * Implementation of hook_cron().
 *
 * Clear down old values from the nonce table.
 */
function services_cron() {
  $expiry_time = time() - variable_get('services_key_expiry', 30);
  db_query("DELETE FROM {services_timestamp_nonce}
    WHERE timestamp < %d", $expiry_time);
}

/**
 * Implementation of hook_help().
 */
function services_help($path, $arg) {
  switch ($path) {
    case 'admin/help#services':
      return '<p>'. t('Visit the <a href="@handbook_url">Services Handbook</a> for help and information.', array('@handbook_url' => 'http://drupal.org/node/109782')) .'</p>';

    case 'admin/build/services':
    case 'admin/build/services/browse':
      $output = '<p>'. t('Services are collections of methods available to remote applications. They are defined in modules, and may be accessed in a number of ways through server modules. Visit the <a href="@handbook_url">Services Handbook</a> for help and information.', array('@handbook_url' => 'http://drupal.org/node/109782')) .'</p>';
      $output .= '<p>'. t('All enabled services and methods are shown. Click on any method to view information or test.') .'</p>';      return $output;

    case 'admin/build/services/keys':
      return t('An API key is required to allow an application to access Drupal remotely.');

  }
}

/**
 * Implementation of hook_perm().
 */
function services_perm() {
  return array('access services', 'administer services');
}

/**
 * Implementation of hook_menu().
 */
function services_menu() {
  $items['admin/build/services'] = array(
    'access arguments'  => array('administer services'),
    'description'       => 'Allows external applications to communicate with Drupal.',
    'file'              => 'services_admin_browse.inc',
    'page callback'     => 'services_admin_browse_index',
    'title'             => 'Services',
  );
  $items['admin/build/services/browse'] = array(
    'description'       => 'Browse and test available remote services.',
    'title'             => 'Browse',
    'type'              => MENU_DEFAULT_LOCAL_TASK,
    'weight'            => -10,
  );
  $items['admin/build/services/browse/%services_service'] = array(
    'access arguments'  => array('administer services'),
    'description'       => 'Calls a Services method.',
    'file'              => 'services_admin_browse.inc',
    'page callback'     => 'services_admin_browse_method',
    'page arguments'    => array(4),
    'title'             => 'Services',
    'type'              => MENU_LOCAL_TASK,
  );
  $items['admin/build/services/keys'] = array(
    'access callback'   => 'variable_get',
    'access arguments'  => array('services_use_key', TRUE),
    'description'       => 'Manage application access to site services.',
    'file'              => 'services_admin_keys.inc',
    'page callback'     => 'services_admin_keys_list',
    'title'             => 'Keys',
    'type'              => MENU_LOCAL_TASK,
  );
  $items['admin/build/services/keys/%'] = array(
    'title'             => 'Edit key',
    'access arguments'  => array('administer services'),
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('services_admin_keys_form'),
    'file'              => 'services_admin_keys.inc',
    'type'              => MENU_CALLBACK,
  );
  $items['admin/build/services/keys/%/delete'] = array(
    'access arguments'  => array('administer services'),
    'file'              => 'services_admin_keys.inc',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('services_admin_keys_delete_confirm'),
    'type'              => MENU_CALLBACK,
  );
  $items['admin/build/services/keys/list'] = array(
    'access callback'   => 'variable_get',
    'access arguments'  => array('services_use_key', TRUE),
    'title'             => 'List',
    'type'              => MENU_DEFAULT_LOCAL_TASK,
    'weight'            => -10,
  );
  $items['admin/build/services/keys/add'] = array(
    'title'             => 'Create key',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('services_admin_keys_form'),
    'access callback'   => 'variable_get',
    'access arguments'  => array('services_use_key', TRUE),
    'type'              => MENU_LOCAL_TASK,
    'file'              => 'services_admin_keys.inc',
  );
  $items['admin/build/services/settings'] = array(
    'title'             => 'Settings',
    'description'       => 'Configure service settings.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('services_admin_settings'),
    'access arguments'  => array('administer services'),
    'type'              => MENU_LOCAL_TASK,
    'file'              => 'services_admin_browse.inc',
  );
  $items['admin/build/services/settings/general'] = array(
    'title'             => 'General',
    'description'       => 'Configure service settings.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('services_admin_settings'),
    'access arguments'  => array('administer services'),
    'type'              => MENU_DEFAULT_LOCAL_TASK,
    'weight'            => -10,
  );
  $items['crossdomain.xml'] = array(
    'access arguments'  => array('access services'),
    'file'              => 'services.inc',
    'page callback'     => '_services_crossdomain_xml',
    'type'              => MENU_CALLBACK,
  );
  $items['services/%'] = array(
    'access arguments'  => array('access services'),
    'file'              => 'services.inc',
    'page callback'     => '_services_server',
    'page arguments'    => array(1),
    'title'             => 'Services',
    'type'              => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Menu wildcard loader for browsing Service methods.
 */
function services_service_load($method) {
  module_load_include('inc', 'services');
  $method = _services_service_get($method);
  return isset($method) ? $method : FALSE;
}

/**
 * Implementation of hook_theme().
 */
function services_theme() {
  return array(
    'services_admin_browse_test' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}
