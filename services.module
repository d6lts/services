<?php
// $Id$
/**
 * @author Services Dev Team
 * @file
 *  Provides a generic by powerful API for web services.
 */

/**
 * Implementation of hook_cron().
 *
 * Clear down old values from the nonce table.
 */
function services_cron() {
  $expiry_time = time() - variable_get('services_key_expiry', 30);
  db_query("DELETE FROM {services_timestamp_nonce}
    WHERE timestamp < %d", $expiry_time);
}

/**
 * Implementation of hook_help().
 */
function services_help($path, $arg) {
  switch ($path) {
    case 'admin/help#services':
      return '<p>'. t('Visit the <a href="@handbook_url">Services Handbook</a> for help and information.', array('@handbook_url' => 'http://drupal.org/node/109782')) .'</p>';

    case 'admin/build/services':
    case 'admin/build/services/browse':
      $output = '<p>'. t('Services are collections of methods available to remote applications. They are defined in modules, and may be accessed in a number of ways through server modules. Visit the <a href="@handbook_url">Services Handbook</a> for help and information.', array('@handbook_url' => 'http://drupal.org/node/109782')) .'</p>';
      $output .= '<p>'. t('All enabled services and methods are shown. Click on any method to view information or test.') .'</p>';      return $output;

    case 'admin/build/services/keys':
      return t('An API key is required to allow an application to access Drupal remotely.');

  }
}

/**
 * Implementation of hook_perm().
 */
function services_perm() {
  return array('access services', 'administer services');
}

/**
 * Implementation of hook_menu().
 */
function services_menu() {
  $items['admin/build/services'] = array(
    'title'             => 'Services',
    'description'       => 'Allows external applications to communicate with Drupal.',
    'access arguments'  => array('administer services'),
    'page callback'     => 'services_admin_browse_index',
    'file'              => 'services_admin_browse.inc',
  );
  $items['admin/build/services/browse'] = array(
    'title'             => 'Browse',
    'description'       => 'Browse and test available remote services.',
    'type'              => MENU_DEFAULT_LOCAL_TASK,
    'weight'            => -10,
  );
  $items['admin/build/services/browse/%services_method'] = array(
    'title'             => 'Services',
    'description'       => 'Calls a Services method.',
    'page callback'     => 'services_admin_browse_method',
    'page arguments'    => array(4),
    'access arguments'  => array('administer services'),
    'type'              => MENU_LOCAL_TASK,
    'file'              => 'services_admin_browse.inc',
  );
  $items['admin/build/services/keys'] = array(
    'title'             => 'Keys',
    'description'       => 'Manage application access to site services.',
    'page callback'     => 'services_admin_keys_list',
    'access callback'   => 'variable_get',
    'access arguments'  => array('services_use_key', TRUE),
    'type'              => MENU_LOCAL_TASK,
    'file'              => 'services_admin_keys.inc',
  );
  $items['admin/build/services/keys/%'] = array(
    'title'             => 'Edit key',
    'access arguments'  => array('administer services'),
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('services_admin_keys_form'),
    'file'              => 'services_admin_keys.inc',
    'type'              => MENU_CALLBACK,
  );
  $items['admin/build/services/keys/%/delete'] = array(
    'title'             => '',
    'access arguments'  => array('administer services'),
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('services_admin_keys_delete_confirm'),
    'file'              => 'services_admin_keys.inc',
    'type'              => MENU_CALLBACK,
  );
  $items['admin/build/services/keys/list'] = array(
    'title'             => 'List',
    'type'              => MENU_DEFAULT_LOCAL_TASK,
    'access callback'   => 'variable_get',
    'access arguments'  => array('services_use_key', TRUE),
    'weight'            => -10,
  );
  $items['admin/build/services/keys/add'] = array(
    'title'             => 'Create key',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('services_admin_keys_form'),
    'access callback'   => 'variable_get',
    'access arguments'  => array('services_use_key', TRUE),
    'type'              => MENU_LOCAL_TASK,
    'file'              => 'services_admin_keys.inc',
  );
  $items['admin/build/services/settings'] = array(
    'title'             => 'Settings',
    'description'       => 'Configure service settings.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('services_admin_settings'),
    'access arguments'  => array('administer services'),
    'type'              => MENU_LOCAL_TASK,
    'file'              => 'services_admin_browse.inc',
  );
  $items['admin/build/services/settings/general'] = array(
    'title'             => 'General',
    'description'       => 'Configure service settings.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('services_admin_settings'),
    'access arguments'  => array('administer services'),
    'type'              => MENU_DEFAULT_LOCAL_TASK,
    'weight'            => -10,
  );
  $items['crossdomain.xml'] = array(
    'access arguments'  => array('access services'),
    'file'              => 'services.inc',
    'page callback'     => '_services_crossdomain_xml',
    'type'              => MENU_CALLBACK,
  );
  $items['services/%'] = array(
    'access arguments'  => array('access services'),
    'file'              => 'services.inc',
    'page callback'     => '_services_server',
    'page arguments'    => array(1),
    'title'             => 'Services',
    'type'              => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_theme().
 */
function services_theme() {
  return array(
    'services_admin_browse_test' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

function services_set_server_info($module) {
  $server_info = new stdClass();
  $server_info->module = $module;
  $server_info->drupal_path = getcwd();
  return services_get_server_info($server_info);
}

function services_get_server_info($server_info = NULL) {
  static $info;
  if (!$info and $server_info) {
    $info = $server_info;
  }
  return $info;
}

/**
   * This should probably be cached in drupal cache.
 */
function services_get_all() {
  static $methods_cache;
  if (!isset($methods_cache)) {
    $methods = module_invoke_all('service');

    // api_key arg
    $arg_api_key = array(
      '#name' => 'hash',
      '#type' => 'string',
      '#description' => t('A valid API key.'),
    );

    // sessid arg
    $arg_sessid = array(
      '#name' => 'sessid',
      '#type' => 'string',
      '#description' => t('A valid sessid.'),
    );

    // domain arg
    $arg_domain_check = array(
      '#name' => 'domain_check',
      '#type' => 'string',
      '#description' => t('A valid domain for the API key.'),
    );

    $arg_domain_time_stamp = array(
      '#name' => 'domain_time_stamp',
      '#type' => 'string',
      '#description' => t('Time stamp used to hash key.'),
    );

    $arg_nonce = array(
      '#name' => 'nonce',
      '#type' => 'string',
      '#description' => t('One time use nonce also used hash key.'),
    );

    foreach ($methods as $key => $method) {

      // set method defaults
      if (!isset($methods[$key]['#auth'])) {
        $methods[$key]['#auth'] = TRUE;
      }

      if (!isset($methods[$key]['#key'])) {
        $methods[$key]['#key'] = TRUE;
      }

      if (!isset($methods[$key]['#access callback'])) {
        $methods[$key]['#access callback'] = 'user_access';
        if (!isset($methods[$key]['#access arguments'])) {
          $methods[$key]['#access arguments'] = array('access services');
        }
      }

      if (!isset($methods[$key]['#args'])) {
        $methods[$key]['#args'] = array();
      }

      if ($methods[$key]['#auth'] and variable_get('services_use_sessid', TRUE)) {
        $methods[$key]['#args'] = array_merge(array($arg_sessid), $methods[$key]['#args']);
      }

      if ($methods[$key]['#key'] and variable_get('services_use_key', TRUE)) {
        $methods[$key]['#args'] = array_merge(array($arg_nonce), $methods[$key]['#args']);
        $methods[$key]['#args'] = array_merge(array($arg_domain_time_stamp), $methods[$key]['#args']);
        $methods[$key]['#args'] = array_merge(array($arg_domain_name), $methods[$key]['#args']);
        $methods[$key]['#args'] = array_merge(array($arg_api_key), $methods[$key]['#args']);
      }

      // set defaults for args
      foreach ($methods[$key]['#args'] as $arg_key => $arg) {
        if (is_array($arg)) {
          if (!isset($arg['#optional'])) {
            $methods[$key]['#args'][$arg_key]['#optional'] = FALSE;
          }
        }
        else {
          $arr_arg = array();
          $arr_arg['#name'] = t('unnamed');
          $arr_arg['#type'] = $arg;
          $arr_arg['#description'] = t('No description given.');
          $arr_arg['#optional'] = FALSE;
          $methods[$key]['#args'][$arg_key] = $arr_arg;
        }
      }
      reset($methods[$key]['#args']);
    }
    $methods_cache = $methods;
  }
  return $methods_cache;
}

/**
 * Menu wildcard loader for browsing Service methods.
 */
function services_method_load($method) {
  $method = services_method_get($method);
  return isset($method) ? $method : FALSE;
}

function services_method_get($method_name) {
  static $method_cache;
  if (!isset($method_cache[$method_name])) {
    foreach (services_get_all() as $method) {
      if ($method_name == $method['#method']) {
        $method_cache[$method_name] = $method;
        break;
      }
    }
  }
  return $method_cache[$method_name];
}

function services_get_key($kid) {
  $keys = services_get_keys();
  foreach ($keys as $key) {
    if ($key->kid == $kid) {
      return $key;
    }
  }
}

function services_get_keys() {
  static $keys;
  if (!$keys) {
    $keys = array();
    $result = db_query("SELECT * FROM {services_keys}");
    while ($key = db_fetch_object($result)) {
      $keys[$key->kid] = $key;
    }
  }
  return $keys;
}
