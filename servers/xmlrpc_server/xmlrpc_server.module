<?php
// $Id$
/**
 * @author Services Dev Team
 * @file
 *  Enable XML-RPC for services module.
 */

/**
 * Execute Services if called by the Drupal standard XML RPC
 * URL, xmlrpc.php.
 *
 * @param ...
 *   Depends. The amount and type of arguments varies from
 *   service to service. They are captured by func_get_args().
 * @return
 *   Depends. It depends on each service
 */
function _xmlrpc_server_call_wrapper() {
  $xmlrpc_server = xmlrpc_server_get();
  $method_name = $xmlrpc_server->message->methodname;
  $args = func_get_args();
  module_load_include('inc', 'services');
  return services_method_call($method_name, $args);
}

/**
 * Implementation of hook_server().
 */
function xmlrpc_server_server() {
  require_once './includes/xmlrpc.inc';
  require_once './includes/xmlrpcs.inc';
  return xmlrpc_server(xmlrpc_server_xmlrpc());
}

/**
 * Implementation of hook_server_info().
 */
function xmlrpc_server_server_info() {
  return array(
    '#name' => 'XMLRPC',
    '#path' => 'xmlrpc'
  );
}

/**
 * Implementation of hook_server_error().
 */
function xmlrpc_server_server_error($message) {
  static $xmlrpcusererr;

  // Transform the array message into a string
  if (is_array($message)) {
    $message = implode(' ', $message);
  }

  return xmlrpc_error(++$xmlrpcusererr, strip_tags($message));
}

/**
 * Implementation of hook_xmlrpc().
 */
function xmlrpc_server_xmlrpc() {
  // Convert all services to a Drupal standard
  // XML RPC services.
  $callbacks = array();
  foreach (services_service_get_all() as $method) {
    $args = array();
    foreach ($method['#args'] as $arg) {
      if (!is_array($arg)) {
        $args[] = $arg;
      }
      else {
        $args[] = $arg['#type'];
      }
    }
    $callbacks[] = array(
      $method['#method'],
      '_xmlrpc_server_call_wrapper',
      array_merge(array($method['#return']), $args),
      $method['#description']);
  }
  return $callbacks;
}
