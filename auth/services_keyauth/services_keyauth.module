<?php
// $Id$
/**
 * @author Services Dev Team
 * @file
 *  Provides a key based validation system.
 */
/**
 * Implementation of hook_authentication_info().
 *
 * @return array
 *  The configuration array for the authentication scheme
 */
function services_keyauth_authentication_info() {
  return array(
    '#file' => 'services_keyauth.inc',
    '#title' => t('Key authentication'),
    '#description' => t('The default key-based authentication'),
    'security_settings' => '_services_keyauth_security_settings',
    'security_settings_validate' => '_services_keyauth_security_settings_validate',
    'security_settings_submit' => '_services_keyauth_security_settings_submit',
    'alter_methods' => '_services_keyauth_alter_methods',
    'alter_browse_form' => '_services_keyauth_alter_browse_form',
    'authenticate_call' => '_services_keyauth_authenticate_call',
  );
}

/**
 * Implementation of hook_menu().
 */
function services_keyauth_menu() {
  $items = array();

  $items['admin/build/services/keys'] = array(
    'title'             => 'Keys',
    'description'       => 'Manage application access to site services.',
    'page callback'     => 'services_keyauth_admin_keys_list',
    'access callback'   => 'variable_get',
    'access arguments'  => array('services_use_key', TRUE),
    'type'              => MENU_LOCAL_TASK,
    'file'              => 'services_keyauth.admin.inc',
  );
  $items['admin/build/services/keys/%'] = array(
    'title'             => 'Edit key',
    'access arguments'  => array('administer services'),
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('services_keyauth_admin_keys_form'),
    'file'              => 'services_keyauth.admin.inc',
    'type'              => MENU_CALLBACK,
  );
  $items['admin/build/services/keys/%/delete'] = array(
    'access arguments'  => array('administer services'),
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('services_keyauth_admin_keys_delete_confirm', 4),
    'file'              => 'services_keyauth.admin.inc',
    'type'              => MENU_CALLBACK,
  );
  $items['admin/build/services/keys/list'] = array(
    'title'             => 'List',
    'type'              => MENU_DEFAULT_LOCAL_TASK,
    'access callback'   => 'variable_get',
    'access arguments'  => array('services_use_key', TRUE),
    'weight'            => -10,
  );
  $items['admin/build/services/keys/add'] = array(
    'title'             => 'Create key',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('services_keyauth_admin_keys_form'),
    'access callback'   => 'variable_get',
    'access arguments'  => array('services_use_key', TRUE),
    'type'              => MENU_LOCAL_TASK,
    'file'              => 'services_keyauth.admin.inc',
  );

  return $items;
}

function services_keyauth_validate_key($kid, $timestamp, $domain, $nonce, $method_name, $hash_parameters, $hash) {
  $hash_parameters = array_merge(array($timestamp, $domain, $nonce, $method_name), $hash_parameters);
  $rehash = hash_hmac("sha256", implode(';', $hash_parameters), $kid);
  return ($rehash == $hash) ? TRUE : FALSE;
}

function services_keyauth_get_key($kid) {
  $keys = services_keyauth_get_keys();
  foreach ($keys as $key) {
    if ($key->kid == $kid) {
      return $key;
    }
  }
}

function services_keyauth_get_keys() {
  static $keys;
  if (!$keys) {
    $keys = array();
    $result = db_query("SELECT * FROM {services_keys}");
    while ($key = db_fetch_object($result)) {
      $keys[$key->kid] = $key;
    }
  }
  return $keys;
}